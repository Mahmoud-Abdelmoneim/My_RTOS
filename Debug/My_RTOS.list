
My_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009a8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ad8  08000ad8  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ad8  08000ad8  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08000ad8  08000ad8  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ad8  08000ad8  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ad8  08000ad8  00010ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000adc  08000adc  00010adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08000ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000038  08000b18  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08000b18  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001400  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000570  00000000  00000000  00021461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  000219d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000160  00000000  00000000  00021b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000014a8  00000000  00000000  00021ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001762  00000000  00000000  00023188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000053af  00000000  00000000  000248ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00029c99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000544  00000000  00000000  00029cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000038 	.word	0x20000038
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ac0 	.word	0x08000ac0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000003c 	.word	0x2000003c
 800016c:	08000ac0 	.word	0x08000ac0

08000170 <GPIO_u8PinInit>:
 * @brief  :this function initilizes modes of pins according to input parameters
 * @para   :PinConfig_t[in] the initilization vales of the pin
 * @retval :return Error status
 */
uint8_t GPIO_u8PinInit(const PinConfig_t * pinconfg)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = NOK ;
 8000178:	2302      	movs	r3, #2
 800017a:	73fb      	strb	r3, [r7, #15]
    if( pinconfg != NULL)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	f000 81ad 	beq.w	80004de <GPIO_u8PinInit+0x36e>
    {

    		if(pinconfg->Mode == GPIO_INPUT)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	789b      	ldrb	r3, [r3, #2]
 8000188:	2b00      	cmp	r3, #0
 800018a:	f040 809f 	bne.w	80002cc <GPIO_u8PinInit+0x15c>
    		{
    			if(pinconfg->PinNum > 7)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	785b      	ldrb	r3, [r3, #1]
 8000192:	2b07      	cmp	r3, #7
 8000194:	d94a      	bls.n	800022c <GPIO_u8PinInit+0xbc>
    			{
    				GPIO_Ports[pinconfg->Port]->CRH &= ~(CONTROL_REGISTER_MASK << ((pinconfg->PinNum-8)*2));    //clear the MODE bits in the register to select input
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	461a      	mov	r2, r3
 800019c:	4b99      	ldr	r3, [pc, #612]	; (8000404 <GPIO_u8PinInit+0x294>)
 800019e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001a2:	685a      	ldr	r2, [r3, #4]
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	785b      	ldrb	r3, [r3, #1]
 80001a8:	3b08      	subs	r3, #8
 80001aa:	005b      	lsls	r3, r3, #1
 80001ac:	2103      	movs	r1, #3
 80001ae:	fa01 f303 	lsl.w	r3, r1, r3
 80001b2:	43db      	mvns	r3, r3
 80001b4:	4619      	mov	r1, r3
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	4618      	mov	r0, r3
 80001bc:	4b91      	ldr	r3, [pc, #580]	; (8000404 <GPIO_u8PinInit+0x294>)
 80001be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80001c2:	400a      	ands	r2, r1
 80001c4:	605a      	str	r2, [r3, #4]
    				GPIO_Ports[pinconfg->Port]->CRH &= ~(CONTROL_REGISTER_MASK << (((pinconfg->PinNum-8)+1))*2); //clear the CFG bits in the register
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	461a      	mov	r2, r3
 80001cc:	4b8d      	ldr	r3, [pc, #564]	; (8000404 <GPIO_u8PinInit+0x294>)
 80001ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001d2:	685a      	ldr	r2, [r3, #4]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	785b      	ldrb	r3, [r3, #1]
 80001d8:	3b07      	subs	r3, #7
 80001da:	005b      	lsls	r3, r3, #1
 80001dc:	2103      	movs	r1, #3
 80001de:	fa01 f303 	lsl.w	r3, r1, r3
 80001e2:	43db      	mvns	r3, r3
 80001e4:	4619      	mov	r1, r3
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	4618      	mov	r0, r3
 80001ec:	4b85      	ldr	r3, [pc, #532]	; (8000404 <GPIO_u8PinInit+0x294>)
 80001ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80001f2:	400a      	ands	r2, r1
 80001f4:	605a      	str	r2, [r3, #4]
    				GPIO_Ports[pinconfg->Port]->CRH |= ((pinconfg->InMode) << (((pinconfg->PinNum-8) *4)+2)); //set bits CFG to set input mode
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	461a      	mov	r2, r3
 80001fc:	4b81      	ldr	r3, [pc, #516]	; (8000404 <GPIO_u8PinInit+0x294>)
 80001fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	791b      	ldrb	r3, [r3, #4]
 8000208:	4619      	mov	r1, r3
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	785b      	ldrb	r3, [r3, #1]
 800020e:	3b08      	subs	r3, #8
 8000210:	009b      	lsls	r3, r3, #2
 8000212:	3302      	adds	r3, #2
 8000214:	fa01 f303 	lsl.w	r3, r1, r3
 8000218:	4619      	mov	r1, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	4618      	mov	r0, r3
 8000220:	4b78      	ldr	r3, [pc, #480]	; (8000404 <GPIO_u8PinInit+0x294>)
 8000222:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000226:	430a      	orrs	r2, r1
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	e15a      	b.n	80004e2 <GPIO_u8PinInit+0x372>
    			}
    			else if(pinconfg->PinNum <= 7)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	785b      	ldrb	r3, [r3, #1]
 8000230:	2b07      	cmp	r3, #7
 8000232:	d848      	bhi.n	80002c6 <GPIO_u8PinInit+0x156>
    			{
    				GPIO_Ports[pinconfg->Port]->CRL &= ~(CONTROL_REGISTER_MASK << ((pinconfg->PinNum)*2));    //clear the MODE bits in the register to elect input
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	461a      	mov	r2, r3
 800023a:	4b72      	ldr	r3, [pc, #456]	; (8000404 <GPIO_u8PinInit+0x294>)
 800023c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	785b      	ldrb	r3, [r3, #1]
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	2103      	movs	r1, #3
 800024a:	fa01 f303 	lsl.w	r3, r1, r3
 800024e:	43db      	mvns	r3, r3
 8000250:	4619      	mov	r1, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	4b6a      	ldr	r3, [pc, #424]	; (8000404 <GPIO_u8PinInit+0x294>)
 800025a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800025e:	400a      	ands	r2, r1
 8000260:	601a      	str	r2, [r3, #0]
    				GPIO_Ports[pinconfg->Port]->CRL &= ~(CONTROL_REGISTER_MASK << (((pinconfg->PinNum)+1))*2); //clear the CFG bits in the register
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	461a      	mov	r2, r3
 8000268:	4b66      	ldr	r3, [pc, #408]	; (8000404 <GPIO_u8PinInit+0x294>)
 800026a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	785b      	ldrb	r3, [r3, #1]
 8000274:	3301      	adds	r3, #1
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	2103      	movs	r1, #3
 800027a:	fa01 f303 	lsl.w	r3, r1, r3
 800027e:	43db      	mvns	r3, r3
 8000280:	4619      	mov	r1, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	4618      	mov	r0, r3
 8000288:	4b5e      	ldr	r3, [pc, #376]	; (8000404 <GPIO_u8PinInit+0x294>)
 800028a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800028e:	400a      	ands	r2, r1
 8000290:	601a      	str	r2, [r3, #0]
    				GPIO_Ports[pinconfg->Port]->CRL |= ((pinconfg->InMode) << (((pinconfg->PinNum) *4)+2)); //set bits CFG to set input mode
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	461a      	mov	r2, r3
 8000298:	4b5a      	ldr	r3, [pc, #360]	; (8000404 <GPIO_u8PinInit+0x294>)
 800029a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	791b      	ldrb	r3, [r3, #4]
 80002a4:	4619      	mov	r1, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	785b      	ldrb	r3, [r3, #1]
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	3302      	adds	r3, #2
 80002ae:	fa01 f303 	lsl.w	r3, r1, r3
 80002b2:	4619      	mov	r1, r3
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	4618      	mov	r0, r3
 80002ba:	4b52      	ldr	r3, [pc, #328]	; (8000404 <GPIO_u8PinInit+0x294>)
 80002bc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002c0:	430a      	orrs	r2, r1
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	e10d      	b.n	80004e2 <GPIO_u8PinInit+0x372>
    			}
    			else{
    				Local_u8ErrorState =  NOK;  //if undefined pin number
 80002c6:	2302      	movs	r3, #2
 80002c8:	73fb      	strb	r3, [r7, #15]
 80002ca:	e10a      	b.n	80004e2 <GPIO_u8PinInit+0x372>
    			}
    		}
    		else if(pinconfg->Mode == GPIO_OUTPU)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	789b      	ldrb	r3, [r3, #2]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	f040 8101 	bne.w	80004d8 <GPIO_u8PinInit+0x368>
    		{
    			if(pinconfg->PinNum > 7)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	785b      	ldrb	r3, [r3, #1]
 80002da:	2b07      	cmp	r3, #7
 80002dc:	f240 8094 	bls.w	8000408 <GPIO_u8PinInit+0x298>
    			{
    				/*fill MODE bits*/
    				GPIO_Ports[pinconfg->Port]->CRH &= ~(CONTROL_REGISTER_MASK << ((pinconfg->PinNum-8)*4));    //clear the MODE bits in the register
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	461a      	mov	r2, r3
 80002e6:	4b47      	ldr	r3, [pc, #284]	; (8000404 <GPIO_u8PinInit+0x294>)
 80002e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	785b      	ldrb	r3, [r3, #1]
 80002f2:	3b08      	subs	r3, #8
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	2103      	movs	r1, #3
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	43db      	mvns	r3, r3
 80002fe:	4619      	mov	r1, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	4618      	mov	r0, r3
 8000306:	4b3f      	ldr	r3, [pc, #252]	; (8000404 <GPIO_u8PinInit+0x294>)
 8000308:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800030c:	400a      	ands	r2, r1
 800030e:	605a      	str	r2, [r3, #4]
    				GPIO_Ports[pinconfg->Port]->CRH |= ((pinconfg->OutMaxSpeed) << ((pinconfg->PinNum-8)*4));    //Select the output max speed MODE
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b3b      	ldr	r3, [pc, #236]	; (8000404 <GPIO_u8PinInit+0x294>)
 8000318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800031c:	685a      	ldr	r2, [r3, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	799b      	ldrb	r3, [r3, #6]
 8000322:	4619      	mov	r1, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	785b      	ldrb	r3, [r3, #1]
 8000328:	3b08      	subs	r3, #8
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	4619      	mov	r1, r3
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	4618      	mov	r0, r3
 8000338:	4b32      	ldr	r3, [pc, #200]	; (8000404 <GPIO_u8PinInit+0x294>)
 800033a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800033e:	430a      	orrs	r2, r1
 8000340:	605a      	str	r2, [r3, #4]
    				/*fill CFG bits*/
    				GPIO_Ports[pinconfg->Port]->CRH &= ~(CONTROL_REGISTER_MASK << ((pinconfg->PinNum-8)*4 +2)); //clear the CFG bits in the register
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	461a      	mov	r2, r3
 8000348:	4b2e      	ldr	r3, [pc, #184]	; (8000404 <GPIO_u8PinInit+0x294>)
 800034a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800034e:	685a      	ldr	r2, [r3, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	785b      	ldrb	r3, [r3, #1]
 8000354:	3b08      	subs	r3, #8
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	3302      	adds	r3, #2
 800035a:	2103      	movs	r1, #3
 800035c:	fa01 f303 	lsl.w	r3, r1, r3
 8000360:	43db      	mvns	r3, r3
 8000362:	4619      	mov	r1, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	4618      	mov	r0, r3
 800036a:	4b26      	ldr	r3, [pc, #152]	; (8000404 <GPIO_u8PinInit+0x294>)
 800036c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000370:	400a      	ands	r2, r1
 8000372:	605a      	str	r2, [r3, #4]
    				GPIO_Ports[pinconfg->Port]->CRH |= ((pinconfg->Outmode) << (((pinconfg->PinNum-8) *4)+2)); //set bits CFG to set output mode
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	461a      	mov	r2, r3
 800037a:	4b22      	ldr	r3, [pc, #136]	; (8000404 <GPIO_u8PinInit+0x294>)
 800037c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000380:	685a      	ldr	r2, [r3, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	78db      	ldrb	r3, [r3, #3]
 8000386:	4619      	mov	r1, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	785b      	ldrb	r3, [r3, #1]
 800038c:	3b08      	subs	r3, #8
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	3302      	adds	r3, #2
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	4619      	mov	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	4b19      	ldr	r3, [pc, #100]	; (8000404 <GPIO_u8PinInit+0x294>)
 80003a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80003a4:	430a      	orrs	r2, r1
 80003a6:	605a      	str	r2, [r3, #4]
    				/************set pull up or pull down*************/
    				/*clear ODR register*/
    				GPIO_Ports[pinconfg->Port]->ODR &= ~(1 << pinconfg->PinNum);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	461a      	mov	r2, r3
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <GPIO_u8PinInit+0x294>)
 80003b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003b4:	68da      	ldr	r2, [r3, #12]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	785b      	ldrb	r3, [r3, #1]
 80003ba:	4619      	mov	r1, r3
 80003bc:	2301      	movs	r3, #1
 80003be:	408b      	lsls	r3, r1
 80003c0:	43db      	mvns	r3, r3
 80003c2:	4619      	mov	r1, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	4618      	mov	r0, r3
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <GPIO_u8PinInit+0x294>)
 80003cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80003d0:	400a      	ands	r2, r1
 80003d2:	60da      	str	r2, [r3, #12]
    				/*state pull up or pull down value to ODR*/
    				GPIO_Ports[pinconfg->Port]->ODR |= (pinconfg->Pull << pinconfg->PinNum);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <GPIO_u8PinInit+0x294>)
 80003dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003e0:	68da      	ldr	r2, [r3, #12]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	795b      	ldrb	r3, [r3, #5]
 80003e6:	4619      	mov	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	785b      	ldrb	r3, [r3, #1]
 80003ec:	fa01 f303 	lsl.w	r3, r1, r3
 80003f0:	4619      	mov	r1, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	4b02      	ldr	r3, [pc, #8]	; (8000404 <GPIO_u8PinInit+0x294>)
 80003fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80003fe:	430a      	orrs	r2, r1
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	e06e      	b.n	80004e2 <GPIO_u8PinInit+0x372>
 8000404:	20000000 	.word	0x20000000
    			}
    			else if(pinconfg->PinNum <= 7)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	785b      	ldrb	r3, [r3, #1]
 800040c:	2b07      	cmp	r3, #7
 800040e:	d860      	bhi.n	80004d2 <GPIO_u8PinInit+0x362>
    			{
    				/*fill MODE bits to select :push pull,open drain,AF push pull,AF open drain*/
    				GPIO_Ports[pinconfg->Port]->CRL &= ~(CONTROL_REGISTER_MASK << ((pinconfg->PinNum)*4));    //clear the MODE bits in the register
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	461a      	mov	r2, r3
 8000416:	4b36      	ldr	r3, [pc, #216]	; (80004f0 <GPIO_u8PinInit+0x380>)
 8000418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	785b      	ldrb	r3, [r3, #1]
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	2103      	movs	r1, #3
 8000426:	fa01 f303 	lsl.w	r3, r1, r3
 800042a:	43db      	mvns	r3, r3
 800042c:	4619      	mov	r1, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	4618      	mov	r0, r3
 8000434:	4b2e      	ldr	r3, [pc, #184]	; (80004f0 <GPIO_u8PinInit+0x380>)
 8000436:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800043a:	400a      	ands	r2, r1
 800043c:	601a      	str	r2, [r3, #0]
    				GPIO_Ports[pinconfg->Port]->CRL |= ((pinconfg->OutMaxSpeed) << ((pinconfg->PinNum)*4));    //Select the output max speed MODE
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	461a      	mov	r2, r3
 8000444:	4b2a      	ldr	r3, [pc, #168]	; (80004f0 <GPIO_u8PinInit+0x380>)
 8000446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	799b      	ldrb	r3, [r3, #6]
 8000450:	4619      	mov	r1, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	785b      	ldrb	r3, [r3, #1]
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	fa01 f303 	lsl.w	r3, r1, r3
 800045c:	4619      	mov	r1, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <GPIO_u8PinInit+0x380>)
 8000466:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800046a:	430a      	orrs	r2, r1
 800046c:	601a      	str	r2, [r3, #0]
    				/*fill CFG bitsto select : max speed*/
    				GPIO_Ports[pinconfg->Port]->CRL &= ~(CONTROL_REGISTER_MASK << (((pinconfg->PinNum)*4)+2)); //clear the CFG bits in the register
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	461a      	mov	r2, r3
 8000474:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <GPIO_u8PinInit+0x380>)
 8000476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	785b      	ldrb	r3, [r3, #1]
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	3302      	adds	r3, #2
 8000484:	2103      	movs	r1, #3
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	43db      	mvns	r3, r3
 800048c:	4619      	mov	r1, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	4618      	mov	r0, r3
 8000494:	4b16      	ldr	r3, [pc, #88]	; (80004f0 <GPIO_u8PinInit+0x380>)
 8000496:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800049a:	400a      	ands	r2, r1
 800049c:	601a      	str	r2, [r3, #0]
    				GPIO_Ports[pinconfg->Port]->CRL |= ((pinconfg->Outmode) << (((pinconfg->PinNum) *4)+2)); //set bits CFG to set output mode
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	461a      	mov	r2, r3
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <GPIO_u8PinInit+0x380>)
 80004a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	78db      	ldrb	r3, [r3, #3]
 80004b0:	4619      	mov	r1, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	785b      	ldrb	r3, [r3, #1]
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	3302      	adds	r3, #2
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	4619      	mov	r1, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <GPIO_u8PinInit+0x380>)
 80004c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80004cc:	430a      	orrs	r2, r1
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	e007      	b.n	80004e2 <GPIO_u8PinInit+0x372>
    			}
    			else{
    				Local_u8ErrorState =  NOK;  //if undefined pin number
 80004d2:	2302      	movs	r3, #2
 80004d4:	73fb      	strb	r3, [r7, #15]
 80004d6:	e004      	b.n	80004e2 <GPIO_u8PinInit+0x372>
    			}
    		}
    		else
    		{
    			Local_u8ErrorState =  NOK;  //if undefined mode
 80004d8:	2302      	movs	r3, #2
 80004da:	73fb      	strb	r3, [r7, #15]
 80004dc:	e001      	b.n	80004e2 <GPIO_u8PinInit+0x372>
    		}

    }
    else{
    	Local_u8ErrorState = NULL_PTR_ERROR ;
 80004de:	2303      	movs	r3, #3
 80004e0:	73fb      	strb	r3, [r7, #15]
    }

    return Local_u8ErrorState;
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3714      	adds	r7, #20
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20000000 	.word	0x20000000

080004f4 <GPIO_u8TogglePinValue>:
 * @beif : this function that toggle pin value
 * @para port[in] port name in the enum Port_t
 * @retval :return Error status
 */
uint8_t GPIO_u8TogglePinValue(Port_t port,Pin pinNum)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = NOK ;
 8000504:	2302      	movs	r3, #2
 8000506:	73fb      	strb	r3, [r7, #15]
	if(port<=GPIO_PORTE && pinNum<= GPIO_PIN_15)
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b04      	cmp	r3, #4
 800050c:	d815      	bhi.n	800053a <GPIO_u8TogglePinValue+0x46>
 800050e:	79bb      	ldrb	r3, [r7, #6]
 8000510:	2b0f      	cmp	r3, #15
 8000512:	d812      	bhi.n	800053a <GPIO_u8TogglePinValue+0x46>
	{

		/*Write the pinStatus value to ODR*/
		TOGGLE_BIT(GPIO_Ports[port]->ODR,pinNum);
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	4a0d      	ldr	r2, [pc, #52]	; (800054c <GPIO_u8TogglePinValue+0x58>)
 8000518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051c:	68da      	ldr	r2, [r3, #12]
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	2101      	movs	r1, #1
 8000522:	fa01 f303 	lsl.w	r3, r1, r3
 8000526:	4618      	mov	r0, r3
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4908      	ldr	r1, [pc, #32]	; (800054c <GPIO_u8TogglePinValue+0x58>)
 800052c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000530:	4042      	eors	r2, r0
 8000532:	60da      	str	r2, [r3, #12]
		Local_u8ErrorState = OK ;
 8000534:	2301      	movs	r3, #1
 8000536:	73fb      	strb	r3, [r7, #15]
 8000538:	e001      	b.n	800053e <GPIO_u8TogglePinValue+0x4a>
	}
	else{
		Local_u8ErrorState = NOK ; //undefined port or pin number
 800053a:	2302      	movs	r3, #2
 800053c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 800053e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000000 	.word	0x20000000

08000550 <Stack_voidSchedulerStackInit>:
uint8_t CurrentTask=1;    /*starting from 1 to ignore the idle task*/
uint32_t GlobalTickCount=0u;
__attribute__ ((naked)) void Stack_voidSchedulerStackInit(uint32_t Copy_u32SchedTOS)
{

	__asm volatile("MSR MSP,R0");
 8000550:	f380 8808 	msr	MSP, r0
	__asm volatile("BX LR");
 8000554:	4770      	bx	lr
}
 8000556:	bf00      	nop

08000558 <Stack_voidTaskStackInit>:
void Stack_voidTaskStackInit()
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0

	UserTask[0].TaskHandler = &IdelTask;
 800055e:	4b36      	ldr	r3, [pc, #216]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 8000560:	4a36      	ldr	r2, [pc, #216]	; (800063c <Stack_voidTaskStackInit+0xe4>)
 8000562:	60da      	str	r2, [r3, #12]
	UserTask[1].TaskHandler = &Task1_Handelr;
 8000564:	4b34      	ldr	r3, [pc, #208]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 8000566:	4a36      	ldr	r2, [pc, #216]	; (8000640 <Stack_voidTaskStackInit+0xe8>)
 8000568:	61da      	str	r2, [r3, #28]
	UserTask[2].TaskHandler = &Task2_Handelr;
 800056a:	4b33      	ldr	r3, [pc, #204]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 800056c:	4a35      	ldr	r2, [pc, #212]	; (8000644 <Stack_voidTaskStackInit+0xec>)
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
	UserTask[3].TaskHandler = &Task3_Handelr;
 8000570:	4b31      	ldr	r3, [pc, #196]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 8000572:	4a35      	ldr	r2, [pc, #212]	; (8000648 <Stack_voidTaskStackInit+0xf0>)
 8000574:	63da      	str	r2, [r3, #60]	; 0x3c
	UserTask[4].TaskHandler = &Task4_Handelr;
 8000576:	4b30      	ldr	r3, [pc, #192]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 8000578:	4a34      	ldr	r2, [pc, #208]	; (800064c <Stack_voidTaskStackInit+0xf4>)
 800057a:	64da      	str	r2, [r3, #76]	; 0x4c

	UserTask[0].PSPvalue = IDLE_TASK_STACK_START;
 800057c:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 800057e:	4a34      	ldr	r2, [pc, #208]	; (8000650 <Stack_voidTaskStackInit+0xf8>)
 8000580:	601a      	str	r2, [r3, #0]
	UserTask[1].PSPvalue = T1_STACK_START;
 8000582:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 8000584:	4a33      	ldr	r2, [pc, #204]	; (8000654 <Stack_voidTaskStackInit+0xfc>)
 8000586:	611a      	str	r2, [r3, #16]
	UserTask[2].PSPvalue = T2_STACK_START;
 8000588:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 800058a:	4a33      	ldr	r2, [pc, #204]	; (8000658 <Stack_voidTaskStackInit+0x100>)
 800058c:	621a      	str	r2, [r3, #32]
	UserTask[3].PSPvalue = T3_STACK_START;
 800058e:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 8000590:	4a32      	ldr	r2, [pc, #200]	; (800065c <Stack_voidTaskStackInit+0x104>)
 8000592:	631a      	str	r2, [r3, #48]	; 0x30
	UserTask[4].PSPvalue = T4_STACK_START;
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 8000596:	4a32      	ldr	r2, [pc, #200]	; (8000660 <Stack_voidTaskStackInit+0x108>)
 8000598:	641a      	str	r2, [r3, #64]	; 0x40


	for(uint8_t TaskNum=0;TaskNum<NUMBER_OF_TASKS;TaskNum++)
 800059a:	2300      	movs	r3, #0
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	e041      	b.n	8000624 <Stack_voidTaskStackInit+0xcc>
	{
		UserTask[TaskNum].State=READY_STATE;
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	4a25      	ldr	r2, [pc, #148]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 80005a4:	011b      	lsls	r3, r3, #4
 80005a6:	4413      	add	r3, r2
 80005a8:	3308      	adds	r3, #8
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
		uint32_t *StackPointer= (uint32_t*)UserTask[TaskNum].PSPvalue;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	4413      	add	r3, r2
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	60bb      	str	r3, [r7, #8]
		StackPointer--;
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	3b04      	subs	r3, #4
 80005be:	60bb      	str	r3, [r7, #8]

		*StackPointer=DUMMY_xPSR;    //xPSR
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005c6:	601a      	str	r2, [r3, #0]
		StackPointer--;
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b04      	subs	r3, #4
 80005cc:	60bb      	str	r3, [r7, #8]

		*StackPointer=(uint32_t)UserTask[TaskNum].TaskHandler;    //PC
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	4a19      	ldr	r2, [pc, #100]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 80005d2:	011b      	lsls	r3, r3, #4
 80005d4:	4413      	add	r3, r2
 80005d6:	330c      	adds	r3, #12
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	601a      	str	r2, [r3, #0]
		StackPointer--;
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	3b04      	subs	r3, #4
 80005e4:	60bb      	str	r3, [r7, #8]

		*StackPointer=DUMMY_LR;    //LR
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	f06f 0202 	mvn.w	r2, #2
 80005ec:	601a      	str	r2, [r3, #0]
		StackPointer--;
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	3b04      	subs	r3, #4
 80005f2:	60bb      	str	r3, [r7, #8]
		for(uint8_t RegNum=0;RegNum<12;RegNum++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	e008      	b.n	800060c <Stack_voidTaskStackInit+0xb4>
		{
			*StackPointer=0;    //Rx
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
			StackPointer--;
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	3b04      	subs	r3, #4
 8000604:	60bb      	str	r3, [r7, #8]
		for(uint8_t RegNum=0;RegNum<12;RegNum++)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	3301      	adds	r3, #1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	2b0b      	cmp	r3, #11
 8000610:	d9f3      	bls.n	80005fa <Stack_voidTaskStackInit+0xa2>
		}

		UserTask[TaskNum].PSPvalue = (uint32_t)StackPointer;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	4908      	ldr	r1, [pc, #32]	; (8000638 <Stack_voidTaskStackInit+0xe0>)
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	440b      	add	r3, r1
 800061c:	601a      	str	r2, [r3, #0]
	for(uint8_t TaskNum=0;TaskNum<NUMBER_OF_TASKS;TaskNum++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b04      	cmp	r3, #4
 8000628:	d9ba      	bls.n	80005a0 <Stack_voidTaskStackInit+0x48>

	}
}
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000054 	.word	0x20000054
 800063c:	080008f9 	.word	0x080008f9
 8000640:	080009d1 	.word	0x080009d1
 8000644:	080009e7 	.word	0x080009e7
 8000648:	080009fd 	.word	0x080009fd
 800064c:	08000a11 	.word	0x08000a11
 8000650:	20004000 	.word	0x20004000
 8000654:	20005000 	.word	0x20005000
 8000658:	20004c00 	.word	0x20004c00
 800065c:	20004800 	.word	0x20004800
 8000660:	20004400 	.word	0x20004400

08000664 <STk_voidInit>:
void STk_voidInit(uint32_t copy_u8TickHz)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	/*Calculate the required number of ticks  */
	uint32_t Local_u32ReloadValu = SYSTICK_TIM_CLK / copy_u8TickHz;
 800066c:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <STk_voidInit+0x48>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	fbb2 f3f3 	udiv	r3, r2, r3
 8000674:	60fb      	str	r3, [r7, #12]

	SYSTICK->RVR = Local_u32ReloadValu - 1 ;
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <STk_voidInit+0x4c>)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3b01      	subs	r3, #1
 800067c:	6053      	str	r3, [r2, #4]

	/*Enable systick Exception*/
	SYSTICK->CSR |=1<<1;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <STk_voidInit+0x4c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <STk_voidInit+0x4c>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6013      	str	r3, [r2, #0]
	/*Select systick clock source */
	SYSTICK->CSR |=1<<2;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <STk_voidInit+0x4c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <STk_voidInit+0x4c>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	6013      	str	r3, [r2, #0]
	/*Enable systick timer*/
	SYSTICK->CSR |=1<<0;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <STk_voidInit+0x4c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <STk_voidInit+0x4c>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6013      	str	r3, [r2, #0]
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	007a1200 	.word	0x007a1200
 80006b0:	e000e010 	.word	0xe000e010

080006b4 <ChangeToPSP>:


__attribute__ ((naked)) void ChangeToPSP(void)
{
	/*1- Push the value of the LR to save it since we return to */
	__asm volatile("PUSH {LR}");
 80006b4:	b500      	push	{lr}
	/*2- branch to helper function store psp value to the R0*/
	__asm volatile("BL GetPSPvalue");
 80006b6:	f000 f87f 	bl	80007b8 <GetPSPvalue>
	/*3- Initialise the PSP register*/
	__asm volatile("MSR PSP,R0");
 80006ba:	f380 8809 	msr	PSP, r0
	/*4- pop the LR register value */
	__asm volatile("POP {LR}");
 80006be:	f85d eb04 	ldr.w	lr, [sp], #4
	/*5-change the control register value to switch to psp*/
	__asm volatile("MOV R0,#0X02");
 80006c2:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 80006c6:	f380 8814 	msr	CONTROL, r0
	/*6- Exit*/
	__asm volatile("BX LR");
 80006ca:	4770      	bx	lr

}
 80006cc:	bf00      	nop
	...

080006d0 <EnableSysFualts>:

void EnableSysFualts()
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	SCB->SHCSR |= (1<<16);
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <EnableSysFualts+0x30>)
 80006d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d8:	4a09      	ldr	r2, [pc, #36]	; (8000700 <EnableSysFualts+0x30>)
 80006da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006de:	6493      	str	r3, [r2, #72]	; 0x48
	SCB->SHCSR |= (1<<17);
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <EnableSysFualts+0x30>)
 80006e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <EnableSysFualts+0x30>)
 80006e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ea:	6493      	str	r3, [r2, #72]	; 0x48
	SCB->SHCSR |= (1<<18);
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <EnableSysFualts+0x30>)
 80006ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f0:	4a03      	ldr	r2, [pc, #12]	; (8000700 <EnableSysFualts+0x30>)
 80006f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006f6:	6493      	str	r3, [r2, #72]	; 0x48
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <PendSV_Handler>:

__attribute__ ((naked)) void PendSV_Handler(void)
{
	/*1- Save context of the current task*/
		/*a- Get the PSP vale of the current task*/
		__asm volatile("MRS R0,PSP");
 8000704:	f3ef 8009 	mrs	r0, PSP

		/*b- Using this PSP value store SF2 (R4->R13)*/
		__asm volatile("STMDB R0!,{R4-R11}");
 8000708:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		__asm volatile("PUSH {LR}");
 800070c:	b500      	push	{lr}
		/*Save the current value of PSP*/
		__asm volatile("BL SavePSPvalue");
 800070e:	f000 f863 	bl	80007d8 <SavePSPvalue>

	/*2- Retrieve context of the next task*/
		/*a- Decied which task should be run*/
		__asm volatile("BL UpdateNextTask");
 8000712:	f000 f875 	bl	8000800 <UpdateNextTask>

		/*b- Get its PSP value */
		__asm volatile("BL GetPSPvalue");
 8000716:	f000 f84f 	bl	80007b8 <GetPSPvalue>

		__asm volatile("POP {LR}");
 800071a:	f85d eb04 	ldr.w	lr, [sp], #4
		/*c- Using this PSP value, Retrieve the SF2 (R4->R13)*/
		__asm volatile("LDMIA R0!,{R4-R11}");
 800071e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}


		/*d- Update the PSP value*/
		__asm volatile("MSR PSP,R0");
 8000722:	f380 8809 	msr	PSP, r0

		/*e- Exit*/
		__asm volatile("BX LR");
 8000726:	4770      	bx	lr

}
 8000728:	bf00      	nop
	...

0800072c <UnblockTasks>:

static void UnblockTasks()
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
	for(uint8_t TaskNum=1;TaskNum<NUMBER_OF_TASKS;TaskNum++)
 8000732:	2301      	movs	r3, #1
 8000734:	71fb      	strb	r3, [r7, #7]
 8000736:	e01b      	b.n	8000770 <UnblockTasks+0x44>
	{
		if(UserTask[TaskNum].State == BLOCK_STATE)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <UnblockTasks+0x58>)
 800073c:	011b      	lsls	r3, r3, #4
 800073e:	4413      	add	r3, r2
 8000740:	3308      	adds	r3, #8
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d110      	bne.n	800076a <UnblockTasks+0x3e>
		{
			if(UserTask[TaskNum].BlockCount == GlobalTickCount)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <UnblockTasks+0x58>)
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	4413      	add	r3, r2
 8000750:	3304      	adds	r3, #4
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <UnblockTasks+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d106      	bne.n	800076a <UnblockTasks+0x3e>
			{
				UserTask[TaskNum].State = READY_STATE;
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	4a09      	ldr	r2, [pc, #36]	; (8000784 <UnblockTasks+0x58>)
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	4413      	add	r3, r2
 8000764:	3308      	adds	r3, #8
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
	for(uint8_t TaskNum=1;TaskNum<NUMBER_OF_TASKS;TaskNum++)
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	3301      	adds	r3, #1
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b04      	cmp	r3, #4
 8000774:	d9e0      	bls.n	8000738 <UnblockTasks+0xc>
			}
		}
	}
}
 8000776:	bf00      	nop
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000054 	.word	0x20000054
 8000788:	200000a4 	.word	0x200000a4

0800078c <SysTick_Handler>:

 void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	 /*1- Update the Global Tick Count */
	 GlobalTickCount++;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <SysTick_Handler+0x24>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	4a06      	ldr	r2, [pc, #24]	; (80007b0 <SysTick_Handler+0x24>)
 8000798:	6013      	str	r3, [r2, #0]
	 /*2- Update the next Task*/
	 UnblockTasks();
 800079a:	f7ff ffc7 	bl	800072c <UnblockTasks>
	 /*3- pend(trigger) the pendSV Exception*/
	 SCB->ICSR |=(1<<28);
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SysTick_Handler+0x28>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <SysTick_Handler+0x28>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	6053      	str	r3, [r2, #4]

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000a4 	.word	0x200000a4
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <GetPSPvalue>:

static uint32_t GetPSPvalue(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
	return UserTask[CurrentTask].PSPvalue;
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <GetPSPvalue+0x18>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <GetPSPvalue+0x1c>)
 80007c2:	011b      	lsls	r3, r3, #4
 80007c4:	4413      	add	r3, r2
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	20000014 	.word	0x20000014
 80007d4:	20000054 	.word	0x20000054

080007d8 <SavePSPvalue>:
static void SavePSPvalue(uint32_t Copy_u32CurrentValePSP)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	UserTask[CurrentTask].PSPvalue = Copy_u32CurrentValePSP;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SavePSPvalue+0x20>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4a05      	ldr	r2, [pc, #20]	; (80007fc <SavePSPvalue+0x24>)
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	4413      	add	r3, r2
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	20000014 	.word	0x20000014
 80007fc:	20000054 	.word	0x20000054

08000800 <UpdateNextTask>:
static void UpdateNextTask(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
	for(uint8_t TaskNum=0;TaskNum<NUMBER_OF_TASKS;TaskNum++)
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
 800080a:	e021      	b.n	8000850 <UpdateNextTask+0x50>
	{
		CurrentTask++;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <UpdateNextTask+0x7c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <UpdateNextTask+0x7c>)
 8000816:	701a      	strb	r2, [r3, #0]
		CurrentTask= CurrentTask%NUMBER_OF_TASKS;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <UpdateNextTask+0x7c>)
 800081a:	781a      	ldrb	r2, [r3, #0]
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <UpdateNextTask+0x80>)
 800081e:	fba3 1302 	umull	r1, r3, r3, r2
 8000822:	0899      	lsrs	r1, r3, #2
 8000824:	460b      	mov	r3, r1
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	440b      	add	r3, r1
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <UpdateNextTask+0x7c>)
 8000830:	701a      	strb	r2, [r3, #0]
		if(UserTask[CurrentTask].State == READY_STATE && TaskNum != 0)
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <UpdateNextTask+0x7c>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4a13      	ldr	r2, [pc, #76]	; (8000884 <UpdateNextTask+0x84>)
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	4413      	add	r3, r2
 800083c:	3308      	adds	r3, #8
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <UpdateNextTask+0x4a>
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d106      	bne.n	8000858 <UpdateNextTask+0x58>
	for(uint8_t TaskNum=0;TaskNum<NUMBER_OF_TASKS;TaskNum++)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	3301      	adds	r3, #1
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	2b04      	cmp	r3, #4
 8000854:	d9da      	bls.n	800080c <UpdateNextTask+0xc>
 8000856:	e000      	b.n	800085a <UpdateNextTask+0x5a>
		{
			break;
 8000858:	bf00      	nop
		}

	}
	if(UserTask[CurrentTask].State != READY_STATE)
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <UpdateNextTask+0x7c>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4a09      	ldr	r2, [pc, #36]	; (8000884 <UpdateNextTask+0x84>)
 8000860:	011b      	lsls	r3, r3, #4
 8000862:	4413      	add	r3, r2
 8000864:	3308      	adds	r3, #8
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d002      	beq.n	8000872 <UpdateNextTask+0x72>
	{
		CurrentTask = 0;
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <UpdateNextTask+0x7c>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
	}

}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	20000014 	.word	0x20000014
 8000880:	cccccccd 	.word	0xcccccccd
 8000884:	20000054 	.word	0x20000054

08000888 <TaskDelay>:

void TaskDelay(uint32_t Copy_u3Blockingcount)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	/*Idle task can't be blocked*/
	if(CurrentTask != 0){
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <TaskDelay+0x60>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d021      	beq.n	80008dc <TaskDelay+0x54>
		ENTER_CRITICAL_SECTION();
 8000898:	f04f 0001 	mov.w	r0, #1
 800089c:	f380 8810 	msr	PRIMASK, r0
		/*update the task blocking period*/
		UserTask[CurrentTask].BlockCount = GlobalTickCount
				+ Copy_u3Blockingcount;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <TaskDelay+0x64>)
 80008a2:	681a      	ldr	r2, [r3, #0]
		UserTask[CurrentTask].BlockCount = GlobalTickCount
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <TaskDelay+0x60>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4618      	mov	r0, r3
				+ Copy_u3Blockingcount;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	441a      	add	r2, r3
		UserTask[CurrentTask].BlockCount = GlobalTickCount
 80008ae:	4910      	ldr	r1, [pc, #64]	; (80008f0 <TaskDelay+0x68>)
 80008b0:	0103      	lsls	r3, r0, #4
 80008b2:	440b      	add	r3, r1
 80008b4:	3304      	adds	r3, #4
 80008b6:	601a      	str	r2, [r3, #0]
		/*update the task state */
		UserTask[CurrentTask].State = BLOCK_STATE;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <TaskDelay+0x60>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <TaskDelay+0x68>)
 80008be:	011b      	lsls	r3, r3, #4
 80008c0:	4413      	add	r3, r2
 80008c2:	3308      	adds	r3, #8
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
		EXIT_CRITICAL_SECTION();
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	f380 8810 	msr	PRIMASK, r0
		/*call the scheduler by pend pendsv  */
		SCB->ICSR |=(1<<28);
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <TaskDelay+0x6c>)
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <TaskDelay+0x6c>)
 80008d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008da:	6053      	str	r3, [r2, #4]
	}


}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000014 	.word	0x20000014
 80008ec:	200000a4 	.word	0x200000a4
 80008f0:	20000054 	.word	0x20000054
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <IdelTask>:


void IdelTask(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
	while(1);
 80008fc:	e7fe      	b.n	80008fc <IdelTask+0x4>

080008fe <BusFault_Handler>:
}
void BusFault_Handler()
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <MemManage_Handler>:
void MemManage_Handler()
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <UsageFault_Handler>:
void UsageFault_Handler()
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
	...

08000924 <RCC_SetSystemClk>:
		}
		break;
	}
}
void RCC_SetSystemClk(Clock_t ClkType)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR |= ClkType;
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <RCC_SetSystemClk+0x20>)
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	4903      	ldr	r1, [pc, #12]	; (8000944 <RCC_SetSystemClk+0x20>)
 8000936:	4313      	orrs	r3, r2
 8000938:	604b      	str	r3, [r1, #4]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	40021000 	.word	0x40021000

08000948 <RCC_APB2_PeriphralEnableClk>:
void RCC_APB1_PeriphralDisableClk(RCC_Peripheral_t periphral)
{

}
void RCC_APB2_PeriphralEnableClk(RCC_Peripheral_t periphral)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	RCC->APB2ENR |= (1<<periphral);
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <RCC_APB2_PeriphralEnableClk+0x28>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	79fa      	ldrb	r2, [r7, #7]
 8000958:	2101      	movs	r1, #1
 800095a:	fa01 f202 	lsl.w	r2, r1, r2
 800095e:	4611      	mov	r1, r2
 8000960:	4a03      	ldr	r2, [pc, #12]	; (8000970 <RCC_APB2_PeriphralEnableClk+0x28>)
 8000962:	430b      	orrs	r3, r1
 8000964:	6193      	str	r3, [r2, #24]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	40021000 	.word	0x40021000

08000974 <main>:
		.Mode=GPIO_OUTPU,
		.OutMaxSpeed =OUTPUT_MAX_SPEED_10_MHz,
		.Outmode=GP_PUSH_PULL
};
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	RCC_SetSystemClk(HSI_CLK);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ffd3 	bl	8000924 <RCC_SetSystemClk>
	RCC_APB2_PeriphralEnableClk(RCC_GPIOA_CLOCK);
 800097e:	2002      	movs	r0, #2
 8000980:	f7ff ffe2 	bl	8000948 <RCC_APB2_PeriphralEnableClk>
	GPIO_u8PinInit(&pin1);
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <main+0x48>)
 8000986:	f7ff fbf3 	bl	8000170 <GPIO_u8PinInit>
	GPIO_u8PinInit(&pin2);
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <main+0x4c>)
 800098c:	f7ff fbf0 	bl	8000170 <GPIO_u8PinInit>
	GPIO_u8PinInit(&pin3);
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <main+0x50>)
 8000992:	f7ff fbed 	bl	8000170 <GPIO_u8PinInit>
	GPIO_u8PinInit(&pin4);
 8000996:	480c      	ldr	r0, [pc, #48]	; (80009c8 <main+0x54>)
 8000998:	f7ff fbea 	bl	8000170 <GPIO_u8PinInit>
	EnableSysFualts();
 800099c:	f7ff fe98 	bl	80006d0 <EnableSysFualts>
	STk_voidInit(1000);
 80009a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a4:	f7ff fe5e 	bl	8000664 <STk_voidInit>
	Stack_voidSchedulerStackInit(SCHEDULER_STACK_START);
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <main+0x58>)
 80009aa:	f7ff fdd1 	bl	8000550 <Stack_voidSchedulerStackInit>
	Stack_voidTaskStackInit();
 80009ae:	f7ff fdd3 	bl	8000558 <Stack_voidTaskStackInit>
	ChangeToPSP();
 80009b2:	f7ff fe7f 	bl	80006b4 <ChangeToPSP>
	Task1_Handelr();
 80009b6:	f000 f80b 	bl	80009d0 <Task1_Handelr>
    /* Loop forever */
	for(;;);
 80009ba:	e7fe      	b.n	80009ba <main+0x46>
 80009bc:	20000018 	.word	0x20000018
 80009c0:	20000020 	.word	0x20000020
 80009c4:	20000028 	.word	0x20000028
 80009c8:	20000030 	.word	0x20000030
 80009cc:	20003c00 	.word	0x20003c00

080009d0 <Task1_Handelr>:
}

void Task1_Handelr(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_u8TogglePinValue(GPIO_PORTA, GPIO_PIN_1);
 80009d4:	2101      	movs	r1, #1
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff fd8c 	bl	80004f4 <GPIO_u8TogglePinValue>
		TaskDelay(1000);
 80009dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e0:	f7ff ff52 	bl	8000888 <TaskDelay>
		GPIO_u8TogglePinValue(GPIO_PORTA, GPIO_PIN_1);
 80009e4:	e7f6      	b.n	80009d4 <Task1_Handelr+0x4>

080009e6 <Task2_Handelr>:
	}
}
void Task2_Handelr(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_u8TogglePinValue(GPIO_PORTA, GPIO_PIN_2);
 80009ea:	2102      	movs	r1, #2
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff fd81 	bl	80004f4 <GPIO_u8TogglePinValue>
		TaskDelay(500);
 80009f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f6:	f7ff ff47 	bl	8000888 <TaskDelay>
		GPIO_u8TogglePinValue(GPIO_PORTA, GPIO_PIN_2);
 80009fa:	e7f6      	b.n	80009ea <Task2_Handelr+0x4>

080009fc <Task3_Handelr>:
	}
}
void Task3_Handelr(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_u8TogglePinValue(GPIO_PORTA, GPIO_PIN_3);
 8000a00:	2103      	movs	r1, #3
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff fd76 	bl	80004f4 <GPIO_u8TogglePinValue>
		TaskDelay(250);
 8000a08:	20fa      	movs	r0, #250	; 0xfa
 8000a0a:	f7ff ff3d 	bl	8000888 <TaskDelay>
		GPIO_u8TogglePinValue(GPIO_PORTA, GPIO_PIN_3);
 8000a0e:	e7f7      	b.n	8000a00 <Task3_Handelr+0x4>

08000a10 <Task4_Handelr>:
	}
}
void Task4_Handelr(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_u8TogglePinValue(GPIO_PORTA, GPIO_PIN_4);
 8000a14:	2104      	movs	r1, #4
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff fd6c 	bl	80004f4 <GPIO_u8TogglePinValue>
		TaskDelay(125);
 8000a1c:	207d      	movs	r0, #125	; 0x7d
 8000a1e:	f7ff ff33 	bl	8000888 <TaskDelay>
		GPIO_u8TogglePinValue(GPIO_PORTA, GPIO_PIN_4);
 8000a22:	e7f7      	b.n	8000a14 <Task4_Handelr+0x4>

08000a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a28:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a52:	f000 f811 	bl	8000a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a56:	f7ff ff8d 	bl	8000974 <main>

08000a5a <LoopForever>:

LoopForever:
  b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
  ldr   r0, =_estack
 8000a5c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000a68:	08000ae0 	.word	0x08000ae0
  ldr r2, =_sbss
 8000a6c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000a70:	200000a8 	.word	0x200000a8

08000a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_2_IRQHandler>
	...

08000a78 <__libc_init_array>:
 8000a78:	b570      	push	{r4, r5, r6, lr}
 8000a7a:	2600      	movs	r6, #0
 8000a7c:	4d0c      	ldr	r5, [pc, #48]	; (8000ab0 <__libc_init_array+0x38>)
 8000a7e:	4c0d      	ldr	r4, [pc, #52]	; (8000ab4 <__libc_init_array+0x3c>)
 8000a80:	1b64      	subs	r4, r4, r5
 8000a82:	10a4      	asrs	r4, r4, #2
 8000a84:	42a6      	cmp	r6, r4
 8000a86:	d109      	bne.n	8000a9c <__libc_init_array+0x24>
 8000a88:	f000 f81a 	bl	8000ac0 <_init>
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	4d0a      	ldr	r5, [pc, #40]	; (8000ab8 <__libc_init_array+0x40>)
 8000a90:	4c0a      	ldr	r4, [pc, #40]	; (8000abc <__libc_init_array+0x44>)
 8000a92:	1b64      	subs	r4, r4, r5
 8000a94:	10a4      	asrs	r4, r4, #2
 8000a96:	42a6      	cmp	r6, r4
 8000a98:	d105      	bne.n	8000aa6 <__libc_init_array+0x2e>
 8000a9a:	bd70      	pop	{r4, r5, r6, pc}
 8000a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa0:	4798      	blx	r3
 8000aa2:	3601      	adds	r6, #1
 8000aa4:	e7ee      	b.n	8000a84 <__libc_init_array+0xc>
 8000aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aaa:	4798      	blx	r3
 8000aac:	3601      	adds	r6, #1
 8000aae:	e7f2      	b.n	8000a96 <__libc_init_array+0x1e>
 8000ab0:	08000ad8 	.word	0x08000ad8
 8000ab4:	08000ad8 	.word	0x08000ad8
 8000ab8:	08000ad8 	.word	0x08000ad8
 8000abc:	08000adc 	.word	0x08000adc

08000ac0 <_init>:
 8000ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac2:	bf00      	nop
 8000ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ac6:	bc08      	pop	{r3}
 8000ac8:	469e      	mov	lr, r3
 8000aca:	4770      	bx	lr

08000acc <_fini>:
 8000acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ace:	bf00      	nop
 8000ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad2:	bc08      	pop	{r3}
 8000ad4:	469e      	mov	lr, r3
 8000ad6:	4770      	bx	lr
